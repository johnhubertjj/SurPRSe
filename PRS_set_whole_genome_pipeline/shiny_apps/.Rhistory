all_phenotypes <- all_phenotypes[,c(all_column_names), with = F]
Old_phenotypes_names <- c("Lthal", "Rthal", "Lcaud", "Rcaud", "Lput", "Rput", "Lpal","Rpal","Lhippo","Rhippo",
"Lamyg","Ramyg","Laccumbens","Raccumbens")
New_phenotypes_names <- current_column_names[c(-1,-2,-3,-18)]
all_phenotypes_2 <-
correlations <- rep(0,14)
par(mfrow=c(2,7))
for (i in 1:14){
correlations[i] <- cor(all_phenotypes[[Old_phenotypes_names[i]]], all_phenotypes[[New_phenotypes_names[i]]])
plots <- ggplot(all_phenotypes, aes_string(Old_phenotypes_names[i],New_phenotypes_names[i])) + geom_point() + geom_abline() + theme(axis.line.x = element_line(colour = "black"), axis.line.y = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())
plots <- plots + ggtitle(paste0 (Old_phenotypes_names[i]," correlations = ", correlations[i]))
print(plots)
}
all_phenotypes$Lthal
all_phenotypes$Lthal_1
all_phenotypes$Raccumbens
all_phenotypes$Raccumbens_1
all_phenotypes$Raccumb_1
i <- 14
correlations[i] <- cor(all_phenotypes[[Old_phenotypes_names[i]]], all_phenotypes[[New_phenotypes_names[i]]])
correlations
?geom_abline
plots <- ggplot(all_phenotypes, aes_string(Old_phenotypes_names[i],New_phenotypes_names[i])) + geom_point() + geom_abline(aes_string(Old_phenotypes_names[i],New_phenotypes_names[i]))) + theme(axis.line.x = element_line(colour = "black"), axis.line.y = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())
plots <- ggplot(all_phenotypes, aes_string(Old_phenotypes_names[i],New_phenotypes_names[i])) + geom_point() + geom_abline(aes_string(Old_phenotypes_names[i],New_phenotypes_names[i])) + theme(axis.line.x = element_line(colour = "black"), axis.line.y = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())
for (i in 1:14){
correlations[i] <- cor(all_phenotypes[[Old_phenotypes_names[i]]], all_phenotypes[[New_phenotypes_names[i]]])
plots <- ggplot(all_phenotypes, aes_string(Old_phenotypes_names[i],New_phenotypes_names[i])) + geom_point() + geom_smooth(method="lm", se=TRUE, fullrange=FALSE, level=0.95) + theme(axis.line.x = element_line(colour = "black"), axis.line.y = element_line(colour = "black"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())
plots <- plots + ggtitle(paste0 (Old_phenotypes_names[i]," correlations = ", correlations[i]))
print(plots)
}
library(ggplot2)
?cor
library(shiny)
library(plotly)
data(diamonds, package = "ggplot2")
nms <- names(diamonds)
dataset <- reactive({
diamonds[sample(nrow(diamonds), input$sampleSize),]
})
str(diamonds)
View(diamonds)
setwd("~/Documents/shiny_apps")
View(diamonds)
?reactive
## Read in data
Full_data <- fread("~/Dropbox/COGS_CLOZUK_PGC2_noCOGS_pathway_PRS_analysis.txt")
## Create new columns parsing the identifiers in the Full_data score column and input to the shiny app
Full_data[, Genesets := gsub(pattern = ".*_SCORE_(.*)_.*", replacement = "\\1", x = Full_data$score,perl = T)]
Full_data[, Gene_regions := gsub(pattern = "^(.*)_geneset_SCORE_.*", replacement = "\\1", x = Full_data$score,perl = T)]
Full_data[, Significance_thresholds := gsub(pattern = ".*_(.*$)", replacement = "\\1", x = Full_data$score,perl = T)]
## Create arguments to shiny app
Gene.sets.input <- unique(Full_data$Genesets)
significance_threshold.input <- unique(Full_data$Significance_thresholds)
DSM.input <- unique(Full_data$samples.i.)
## Identify which rows in the data table contain whole genome information
whole_genome_genic_positions_Full_data <- grep(x = Full_data$Gene_regions, pattern = "genic.genome_SCORE_whole_genome",perl = T)
whole_genome_all_genome_positions_Full_data <- grep(x = Full_data$Gene_regions, pattern = "All.genome_SCORE_whole_genome",perl = T)
## Change the Gene regions identifier to enable comparison of gene-set PRS to whole genome PRS
Full_data[whole_genome_genic_positions_Full_data, Gene_regions := gsub(pattern = "^(.*).genic.genome_SCORE_.*", replacement = "\\1", x = Full_data$Gene_regions[whole_genome_genic_positions_Full_data],perl = T)]
Full_data[whole_genome_all_genome_positions_Full_data, Gene_regions := gsub(pattern = ".*", replacement = "Full", x = Full_data$Gene_regions[whole_genome_all_genome_positions_Full_data],perl = T)]
## Identify columns that require alterations to reduce the number of decimal places
cols <- c("estimate", "SE","r.squared","p")
whole_genome_all_genome_positions_Full_data
Full_data
## Limit data table to input arguments and pipe to limiting columns and ordering based on significance
sample_analysis <- Full_data %>%
filter(samples.i. == input$DSM,
Gene_regions %in% input$Gene_regions,
Significance_thresholds %in% input$Significance_threshold,
Genesets %in% input$geneset
)  %>%
select(c(score:SE,p,r.squared)) %>%
arrange(p)
View(sample_analysis)
View(sample_analysis)
View(Full_data)
whole_genome_plot_all_positions <- c(whole_genome_genic_positions_Full_data,whole_genome_all_genome_positions_Full_data)
Full_data[whole_genome_plot_all_positions, Type := "Whole_genome"]
Full_data[!whole_genome_plot_all_positions, Type:= "Pathways"]
View(Full_data)
Full_data[!whole_genome_plot_all_positions, Type:= "Pathway"]
str(Full_data)
## Read in data
Full_data <- fread("~/Dropbox/COGS_CLOZUK_PGC2_noCOGS_pathway_PRS_analysis.txt")
## Create new columns parsing the identifiers in the Full_data score column and input to the shiny app
Full_data[, Genesets := gsub(pattern = ".*_SCORE_(.*)_.*", replacement = "\\1", x = Full_data$score,perl = T)]
Full_data[, Gene_regions := gsub(pattern = "^(.*)_geneset_SCORE_.*", replacement = "\\1", x = Full_data$score,perl = T)]
Full_data[, Significance_thresholds := gsub(pattern = ".*_(.*$)", replacement = "\\1", x = Full_data$score,perl = T)]
## Create arguments to shiny app
Gene.sets.input <- unique(Full_data$Genesets)
significance_threshold.input <- unique(Full_data$Significance_thresholds)
DSM.input <- unique(Full_data$samples.i.)
## Identify which rows in the data table contain whole genome information
whole_genome_genic_positions_Full_data <- grep(x = Full_data$Gene_regions, pattern = "genic.genome_SCORE_whole_genome",perl = T)
whole_genome_all_genome_positions_Full_data <- grep(x = Full_data$Gene_regions, pattern = "All.genome_SCORE_whole_genome",perl = T)
whole_genome_plot_all_positions <- c(whole_genome_genic_positions_Full_data,whole_genome_all_genome_positions_Full_data)
## Change the Gene regions identifier to enable comparison of gene-set PRS to whole genome PRS
Full_data[whole_genome_genic_positions_Full_data, Gene_regions := gsub(pattern = "^(.*).genic.genome_SCORE_.*", replacement = "\\1", x = Full_data$Gene_regions[whole_genome_genic_positions_Full_data],perl = T)]
Full_data[whole_genome_all_genome_positions_Full_data, Gene_regions := gsub(pattern = ".*", replacement = "Full", x = Full_data$Gene_regions[whole_genome_all_genome_positions_Full_data],perl = T)]
Full_data[whole_genome_plot_all_positions, Type := "Whole_genome"]
Full_data[!whole_genome_plot_all_positions, Type:= "Pathway"]
Full_data$logp <- -log10(Full_data$p)
Full_data$SE_higher <- Full_data$estimate + Full_data$SE
Full_data$SE_lower <- Full_data$estimate - Full_data$SE
Full_data$r2_dir <- 100 * (as.numeric(Full_data$r.squared) *
(sign(as.numeric(Full_data$estimate))))
Full_data$p_value_text <- paste("p =", scientific(Full_data$p, digits = 2), sep = " ")
input$Gene_regions
input$Gene_regions <- c("extended", "Full")
input$Significance_threshold
input$Significance_threshold <- c(0.05,1)
input$geneset
input$geneset <- c("whole_genome", "5HT_2C")
sample_analysis <- Full_data %>%
filter(samples.i. == input$DSM,
Gene_regions %in% input$Gene_regions,
Significance_thresholds %in% input$Significance_threshold,
Genesets %in% input$geneset
)
View(sample_analysis)
## Format DF to DT and apply fixes to the number of decimal points, format "g" = change to nn.dde-dd only if required
Sample_analysis_2 <- as.data.table(sample_analysis)
Sample_analysis_2$score <- factor(sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
View(sample_analysis_2)
View(Sample_analysis_2)
Sample_analysis_2 <- as.data.table(sample_analysis)
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
View(Sample_analysis_2)
p <- ggplot(Sample_analysis_2, aes(x=score, y=logp, fill = Type, group=input$Significance_threshold))
p <- p +
geom_point(aes(colour = Type))
p
input$Significance_threshold
Sample_analysis_2
p <- ggplot(Sample_analysis_2, aes(x=score, y=logp, fill = Type, group=Significance_thresholds))
p <- p +
geom_point(aes(colour = Type))
p
test1 <- levels(p$data$score)
test1
p <- p + facet_grid(. ~ Significance_thresholds,scales = "free_x", space = "free_x") +
theme(strip.text.x = element_text(size = 10))
p <- p + geom_hline(aes(yintercept=1.30103), colour = "red", linetype= "solid", alpha = 0.25)
p <- p + scale_fill_brewer(palette = "Paired")
p <- p + theme(axis.text.x = element_text(angle = 90,size = 10,hjust = 1,vjust = 0.5))
p <- p + ggtitle(top_five_pathways_all$.id[1])
#p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5,vjust = 0.5,angle = 90))
p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5))
p <- p + ylab(label = expression(-'log'[10]*'(p)'))
p <- p + xlab(label = "Polygenic risk score")
p <- ggplot(Sample_analysis_2, aes(x=score, y=logp, fill = Type, group=Significance_thresholds))
p <- p +
geom_point(aes(colour = Type))
p <- p + facet_grid(. ~ Significance_thresholds,scales = "free_x", space = "free_x") +
theme(strip.text.x = element_text(size = 10))
p <- p + geom_hline(aes(yintercept=1.30103), colour = "red", linetype= "solid", alpha = 0.25)
p <- p + scale_fill_brewer(palette = "Paired")
p <- p + theme(axis.text.x = element_text(angle = 90,size = 10,hjust = 1,vjust = 0.5))
p <- p + ggtitle(Sample_analysis_2$.id[1])
#p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5,vjust = 0.5,angle = 90))
p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5))
p <- p + ylab(label = expression(-'log'[10]*'(p)'))
p <- p + xlab(label = "Polygenic risk score")
p
alterations <- Full_data$score
alterations[-whole_genome_plot_all_positions] <- str_replace(string = test1[-whole_genome_positions], pattern = "SCORE_(.*)_",replacement = "\\1")
alterations[-whole_genome_plot_all_positions] <- str_replace(string = test1[-whole_genome_plot_all_positions], pattern = "SCORE_(.*)_",replacement = "\\1")
whole_genome_plot_all_positions
alterations <- Full_data$score
alterations[-whole_genome_plot_all_positions]
alterations[-whole_genome_plot_all_positions] <- str_replace(string = alterations[-whole_genome_plot_all_positions], pattern = "SCORE_(.*)_",replacement = "\\1")
alterations <- Full_data$score
alterations[-whole_genome_plot_all_positions] <- str_replace(string = alterations[-whole_genome_plot_all_positions], pattern = "SCORE_(.*)_.*",replacement = "\\1")
alterations <- Full_data$score
alterations[-whole_genome_plot_all_positions] <- str_replace(string = alterations[-whole_genome_plot_all_positions], pattern = ".*SCORE_(.*)_.*",replacement = "\\1")
alterations[-whole_genome_positions] <- str_replace(string = alterations[-whole_genome_positions], pattern = "long_term_potentiation",replacement = "LTP")
alterations[-whole_genome_positions] <- str_replace(string = alterations[-whole_genome_positions], pattern = "action_potential",replacement = "AP")
alterations[-whole_genome_positions] <- str_replace(string = alterations[-whole_genome_positions], pattern = "depolarization",replacement = "DP")
alterations <- Full_data$score
alterations[-whole_genome_plot_all_positions] <- str_replace(string = alterations[-whole_genome_plot_all_positions], pattern = ".*SCORE_(.*)_.*",replacement = "\\1")
alterations[-whole_genome_plot_all_positions] <- str_replace(string = alterations[-whole_genome_plot_all_positions], pattern = "long_term_potentiation",replacement = "LTP")
alterations[-whole_genome_plot_all_positions] <- str_replace(string = alterations[-whole_genome_plot_all_positions], pattern = "action_potential",replacement = "AP")
alterations[-whole_genome_plot_all_positions] <- str_replace(string = alterations[-whole_genome_plot_all_positions], pattern = "depolarization",replacement = "DP")
alterations
alterations[whole_genome_genic_positions_Full_data] <- "Whole Genome PRS GENIC"
alterations[whole_genome_all_genome_positions_Full_data] <- "Whole Genome PRS ALL"
alterations
Full_data[, alterations := alterations]
Full_data
View(Full_data)
Significance_thresholds <- 0.05
sample_analysis <- Full_data %>%
filter(samples.i. == input$DSM,
Gene_regions %in% input$Gene_regions,
Significance_thresholds %in% input$Significance_threshold,
Genesets %in% input$geneset
)
## Format DF to DT and apply fixes to the number of decimal points, format "g" = change to nn.dde-dd only if required
Sample_analysis_2 <- as.data.table(sample_analysis)
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
# Plot the resulting table for comparisons
p <- ggplot(Sample_analysis_2, aes(x=score, y=logp, fill = Type, group=Significance_thresholds))
p <- p +
geom_point(aes(colour = Type))
p <- p + scale_x_discrete(labels= alterations)
#p <- p + scale_y
p <- p + facet_grid(. ~ Significance_thresholds,scales = "free_x", space = "free_x") +
theme(strip.text.x = element_text(size = 10))
p <- p + geom_hline(aes(yintercept=1.30103), colour = "red", linetype= "solid", alpha = 0.25)
p <- p + scale_fill_brewer(palette = "Paired")
p <- p + theme(axis.text.x = element_text(angle = 90,size = 10,hjust = 1,vjust = 0.5))
p <- p + ggtitle(Sample_analysis_2$.id[1])
#p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5,vjust = 0.5,angle = 90))
p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5))
p <- p + ylab(label = expression(-'log'[10]*'(p)'))
p <- p + xlab(label = "Polygenic risk score")
p
Significance_thresholds
View(sample_analysis)
input$Significance_threshold
input$Significance_threshold <- 0.05
## Limit data table to input arguments and pipe to limiting columns and ordering based on significance
sample_analysis <- Full_data %>%
filter(samples.i. == input$DSM,
Gene_regions %in% input$Gene_regions,
Significance_thresholds %in% input$Significance_threshold,
Genesets %in% input$geneset
)
## Format DF to DT and apply fixes to the number of decimal points, format "g" = change to nn.dde-dd only if required
Sample_analysis_2 <- as.data.table(sample_analysis)
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
# Plot the resulting table for comparisons
p <- ggplot(Sample_analysis_2, aes(x=score, y=logp, fill = Type, group=Significance_thresholds))
p <- p +
geom_point(aes(colour = Type))
p <- p + scale_x_discrete(labels= alterations)
#p <- p + scale_y
p <- p + facet_grid(. ~ Significance_thresholds,scales = "free_x", space = "free_x") +
theme(strip.text.x = element_text(size = 10))
p <- p + geom_hline(aes(yintercept=1.30103), colour = "red", linetype= "solid", alpha = 0.25)
p <- p + scale_fill_brewer(palette = "Paired")
p <- p + theme(axis.text.x = element_text(angle = 90,size = 10,hjust = 1,vjust = 0.5))
p <- p + ggtitle(Sample_analysis_2$.id[1])
#p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5,vjust = 0.5,angle = 90))
p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5))
p <- p + ylab(label = expression(-'log'[10]*'(p)'))
p <- p + xlab(label = "Polygenic risk score")
p
View(sample_analysis)
## Limit data table to input arguments and pipe to limiting columns and ordering based on significance
sample_analysis <- Full_data %>%
filter(samples.i. == input$DSM,
Gene_regions %in% input$Gene_regions,
Significance_thresholds %in% input$Significance_threshold,
Genesets %in% input$geneset
)
## Format DF to DT and apply fixes to the number of decimal points, format "g" = change to nn.dde-dd only if required
Sample_analysis_2 <- as.data.table(sample_analysis)
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
# Plot the resulting table for comparisons
p <- ggplot(Sample_analysis_2, aes(x=score, y=logp, fill = Type, group=Significance_thresholds))
p <- p +
geom_point(aes(colour = Type))
p <- p + scale_x_discrete(labels= Sample_analysis_2$alterations)
p <- p + facet_grid(. ~ Significance_thresholds,scales = "free_x", space = "free_x") +
theme(strip.text.x = element_text(size = 10))
p <- p + geom_hline(aes(yintercept=1.30103), colour = "red", linetype= "solid", alpha = 0.25)
p <- p + scale_fill_brewer(palette = "Paired")
p <- p + theme(axis.text.x = element_text(angle = 90,size = 10,hjust = 1,vjust = 0.5))
p <- p + ggtitle(Sample_analysis_2$.id[1])
#p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5,vjust = 0.5,angle = 90))
p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5))
p <- p + ylab(label = expression(-'log'[10]*'(p)'))
p <- p + xlab(label = "Polygenic risk score")
p
test1 <- levels(p$data$score)
## Limit data table to input arguments and pipe to limiting columns and ordering based on significance
sample_analysis <- Full_data %>%
filter(samples.i. == input$DSM,
Gene_regions %in% input$Gene_regions,
Significance_thresholds %in% input$Significance_threshold,
Genesets %in% input$geneset
)
## Format DF to DT and apply fixes to the number of decimal points, format "g" = change to nn.dde-dd only if required
Sample_analysis_2 <- as.data.table(sample_analysis)
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
# Plot the resulting table for comparisons
p <- ggplot(Sample_analysis_2, aes(x=score, y=logp, fill = Type, group=Significance_thresholds))
p <- p +
geom_point(aes(colour = Type))
p <- p + scale_x_discrete(labels= p$data$alterations)
#p <- p + scale_y
p <- p + facet_grid(. ~ Significance_thresholds,scales = "free_x", space = "free_x") +
theme(strip.text.x = element_text(size = 10))
p <- p + geom_hline(aes(yintercept=1.30103), colour = "red", linetype= "solid", alpha = 0.25)
p <- p + scale_fill_brewer(palette = "Paired")
p <- p + theme(axis.text.x = element_text(angle = 90,size = 10,hjust = 1,vjust = 0.5))
p <- p + ggtitle(Sample_analysis_2$.id[1])
#p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5,vjust = 0.5,angle = 90))
p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5))
p <- p + ylab(label = expression(-'log'[10]*'(p)'))
p <- p + xlab(label = "Polygenic risk score")
p
p$data$alterations
]p$data
p$data
p$data$score
Sample_analysis_2 <- as.data.table(sample_analysis)
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
Sample_analysis_2$alterations <- factor(Sample_analysis_2$alterations, levels = Sample_analysis_2$alterations[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
p <- ggplot(Sample_analysis_2, aes(x=score, y=logp, fill = Type, group=Significance_thresholds))
p <- p +
geom_point(aes(colour = Type))
p <- p + scale_x_discrete(labels= p$data$alterations)
#p <- p + scale_y
p <- p + facet_grid(. ~ Significance_thresholds,scales = "free_x", space = "free_x") +
theme(strip.text.x = element_text(size = 10))
p <- p + geom_hline(aes(yintercept=1.30103), colour = "red", linetype= "solid", alpha = 0.25)
p <- p + scale_fill_brewer(palette = "Paired")
p <- p + theme(axis.text.x = element_text(angle = 90,size = 10,hjust = 1,vjust = 0.5))
p <- p + ggtitle(Sample_analysis_2$.id[1])
#p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5,vjust = 0.5,angle = 90))
p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5))
p <- p + ylab(label = expression(-'log'[10]*'(p)'))
p <- p + xlab(label = "Polygenic risk score")
p
Sample_analysis_2$alterations
p$data$alterations
## Format DF to DT and apply fixes to the number of decimal points, format "g" = change to nn.dde-dd only if required
Sample_analysis_2 <- as.data.table(sample_analysis)
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
Sample_analysis_2$alterations <- factor(Sample_analysis_2$alterations, levels = Sample_analysis_2$alterations[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
# Plot the resulting table for comparisons
p <- ggplot(Sample_analysis_2, aes(x=score, y=logp, fill = Type, group=Significance_thresholds))
p <- p +
geom_point(aes(colour = Type))
p <- p + scale_x_discrete(labels= levels(p$data$alterations))
#p <- p + scale_y
p <- p + facet_grid(. ~ Significance_thresholds,scales = "free_x", space = "free_x") +
theme(strip.text.x = element_text(size = 10))
p <- p + geom_hline(aes(yintercept=1.30103), colour = "red", linetype= "solid", alpha = 0.25)
p <- p + scale_fill_brewer(palette = "Paired")
p <- p + theme(axis.text.x = element_text(angle = 90,size = 10,hjust = 1,vjust = 0.5))
p <- p + ggtitle(Sample_analysis_2$.id[1])
#p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5,vjust = 0.5,angle = 90))
p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5))
p <- p + ylab(label = expression(-'log'[10]*'(p)'))
p <- p + xlab(label = "Polygenic risk score")
p
runApp('Viewing_PRS_set_analyses')
runApp('Viewing_PRS_set_analyses')
runApp('Viewing_PRS_set_analyses')
runApp('Viewing_PRS_set_analyses')
runApp('Viewing_PRS_set_analyses')
input$Significance_threshold <- c(0.05,1)
## Limit data table to input arguments and pipe to limiting columns and ordering based on significance
sample_analysis <- Full_data %>%
filter(samples.i. == input$DSM,
Gene_regions %in% input$Gene_regions,
Significance_thresholds %in% input$Significance_threshold,
Genesets %in% input$geneset
)
## Format DF to DT and apply fixes to the number of decimal points, format "g" = change to nn.dde-dd only if required
Sample_analysis_2 <- as.data.table(sample_analysis)
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
Sample_analysis_2$alterations <- factor(Sample_analysis_2$alterations, levels = Sample_analysis_2$alterations[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
# Plot the resulting table for comparisons
p <- ggplot(Sample_analysis_2, aes(x=score, y=logp, fill = Type, group=Significance_thresholds))
p <- p +
geom_point(aes(colour = Type))
p$data$alterations
## Limit data table to input arguments and pipe to limiting columns and ordering based on significance
sample_analysis <- Full_data %>%
filter(samples.i. == input$DSM,
Gene_regions %in% input$Gene_regions,
Significance_thresholds %in% input$Significance_threshold,
Genesets %in% input$geneset
)
## Format DF to DT and apply fixes to the number of decimal points, format "g" = change to nn.dde-dd only if required
Sample_analysis_2 <- as.data.table(sample_analysis)
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
Sample_analysis_2$alterations <- factor(Sample_analysis_2$alterations, levels = Sample_analysis_2$alterations[order(Sample_analysis_2$Significance_thresholds, Sample_analysis_2$Type)])
Sample_analysis_2$alterations
# Plot the resulting table for comparisons
p <- ggplot(Sample_analysis_2, aes(x=score, y=logp, fill = Type, group=Significance_thresholds))
p <- p +
geom_point(aes(colour = Type))
p <- p + scale_x_discrete(labels= levels(p$data$alterations))
p <- p + facet_grid(. ~ Significance_thresholds,scales = "free_x", space = "free_x") +
theme(strip.text.x = element_text(size = 10))
p <- p + geom_hline(aes(yintercept=1.30103), colour = "red", linetype= "solid", alpha = 0.25)
p <- p + scale_fill_brewer(palette = "Paired")
p <- p + theme(axis.text.x = element_text(angle = 90,size = 10,hjust = 1,vjust = 0.5))
p <- p + ggtitle(Sample_analysis_2$.id[1])
#p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5,vjust = 0.5,angle = 90))
p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5))
p <- p + ylab(label = expression(-'log'[10]*'(p)'))
p <- p + xlab(label = "Polygenic risk score")
p
sample_analysis <- Full_data %>%
filter(samples.i. == input$DSM,
Gene_regions %in% input$Gene_regions,
Significance_thresholds %in% input$Significance_threshold,
Genesets %in% input$geneset
)
## Format DF to DT and apply fixes to the number of decimal points, format "g" = change to nn.dde-dd only if required
Sample_analysis_2 <- as.data.table(sample_analysis)
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
Sample_analysis_2$alterations <- factor(Sample_analysis_2$alterations, levels = Sample_analysis_2$alterations[order(Sample_analysis_2$score, Sample_analysis_2$Type, Sample_analysis_2$Significance_thresholds)])
#
Sample_analysis_2$Significance_thresholds
Sample_analysis_2$alterations
Sample_analysis_2$alterations <- factor(Sample_analysis_2$alterations, levels = Sample_analysis_2$alterations[order(Sample_analysis_2$Type, Sample_analysis_2$Significance_thresholds)])
Sample_analysis_2$alterations <- factor(Sample_analysis_2$alterations, levels = Sample_analysis_2$alterations[order(Sample_analysis_2$Type, Sample_analysis_2$Significance_thresholds)])
# Plot the resulting table for comparisons
p <- ggplot(Sample_analysis_2, aes(x=score, y=logp, fill = Type, group=Significance_thresholds))
p <- p +
geom_point(aes(colour = Type))
p <- p + scale_x_discrete(labels= levels(p$data$alterations))
p <- p + facet_grid(. ~ Significance_thresholds,scales = "free_x", space = "free_x") +
theme(strip.text.x = element_text(size = 10))
p <- p + geom_hline(aes(yintercept=1.30103), colour = "red", linetype= "solid", alpha = 0.25)
p <- p + scale_fill_brewer(palette = "Paired")
p <- p + theme(axis.text.x = element_text(angle = 90,size = 10,hjust = 1,vjust = 0.5))
p <- p + ggtitle(Sample_analysis_2$.id[1])
#p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5,vjust = 0.5,angle = 90))
p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5))
p <- p + ylab(label = expression(-'log'[10]*'(p)'))
p <- p + xlab(label = "Polygenic risk score")
p
Sample_analysis_2$alterations <- factor(Sample_analysis_2$alterations, levels = Sample_analysis_2$alterations[order(Sample_analysis_2$Type, Sample_analysis_2$Significance_thresholds, Sample_analysis_2$score)])
Sample_analysis_2$alterations
Sample_analysis_2$alterations <- factor(Sample_analysis_2$alterations, levels = Sample_analysis_2$alterations[order(Sample_analysis_2$score,Sample_analysis_2$Type, Sample_analysis_2$Significance_thresholds )])
Sample_analysis_2$alterations
Sample_analysis_2$alterations <- factor(Sample_analysis_2$alterations, levels = Sample_analysis_2$alterations[order(Sample_analysis_2$Type, Sample_analysis_2$Significance_thresholds )])
Sample_analysis_2$alterations
## Limit data table to input arguments and pipe to limiting columns and ordering based on significance
sample_analysis <- Full_data %>%
filter(samples.i. == input$DSM,
Gene_regions %in% input$Gene_regions,
Significance_thresholds %in% input$Significance_threshold,
Genesets %in% input$geneset
)
## Format DF to DT and apply fixes to the number of decimal points, format "g" = change to nn.dde-dd only if required
Sample_analysis_2 <- as.data.table(sample_analysis)
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
Sample_analysis_2$alterations
View(sample_analysis_2)
View(Sample_analysis_2)
Sample_analysis_2 <- as.data.table(sample_analysis)
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type, Sample_analysis_2$Significance_thresholds)])
View(Sample_analysis_2)
Sample_analysis_2$score
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
Sample_analysis_2$score
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(unique(Sample_analysis_2$score, Sample_analysis_2$Type))])
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[unique(order(Sample_analysis_2$score, Sample_analysis_2$Type))])
Sample_analysis_2$score
Sample_analysis_2$alterations <- factor(Sample_analysis_2$alterations, levels = unique(Sample_analysis_2$alterations[order(Sample_analysis_2$score, Sample_analysis_2$Type)]))
Sample_analysis_2$alterations
# Plot the resulting table for comparisons
p <- ggplot(Sample_analysis_2, aes(x=score, y=logp, fill = Type, group=Significance_thresholds))
p <- p +
geom_point(aes(colour = Type))
p <- p + scale_x_discrete(labels= levels())
p <- p + facet_grid(. ~ Significance_thresholds,scales = "free_x", space = "free_x") +
theme(strip.text.x = element_text(size = 10))
p <- p + geom_hline(aes(yintercept=1.30103), colour = "red", linetype= "solid", alpha = 0.25)
p <- p + scale_fill_brewer(palette = "Paired")
p <- p + theme(axis.text.x = element_text(angle = 90,size = 10,hjust = 1,vjust = 0.5))
p <- p + ggtitle(Sample_analysis_2$.id[1])
#p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5,vjust = 0.5,angle = 90))
p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5))
p <- p + ylab(label = expression(-'log'[10]*'(p)'))
p <- p + xlab(label = "Polygenic risk score")
p
sample_analysis <- Full_data %>%
filter(samples.i. == input$DSM,
Gene_regions %in% input$Gene_regions,
Significance_thresholds %in% input$Significance_threshold,
Genesets %in% input$geneset
)
## Format DF to DT and apply fixes to the number of decimal points, format "g" = change to nn.dde-dd only if required
Sample_analysis_2 <- as.data.table(sample_analysis)
Sample_analysis_2$score <- factor(Sample_analysis_2$score, levels = Sample_analysis_2$score[order(Sample_analysis_2$score, Sample_analysis_2$Type)])
Sample_analysis_2$alterations <- factor(Sample_analysis_2$alterations, levels = unique(Sample_analysis_2$alterations[order(Sample_analysis_2$score, Sample_analysis_2$Type)]))
# Plot the resulting table for comparisons
p <- ggplot(Sample_analysis_2, aes(x=score, y=logp, fill = Type, group=Significance_thresholds))
p <- p +
geom_point(aes(colour = Type))
p <- p + scale_x_discrete(labels= levels(Sample_analysis_2$alterations))
p <- p + facet_grid(. ~ Significance_thresholds,scales = "free_x", space = "free_x") +
theme(strip.text.x = element_text(size = 10))
p <- p + geom_hline(aes(yintercept=1.30103), colour = "red", linetype= "solid", alpha = 0.25)
p <- p + scale_fill_brewer(palette = "Paired")
p <- p + theme(axis.text.x = element_text(angle = 90,size = 10,hjust = 1,vjust = 0.5))
p <- p + ggtitle(Sample_analysis_2$.id[1])
#p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5,vjust = 0.5,angle = 90))
p <- p + theme(plot.title = element_text( face = "bold",hjust = 0.5))
p <- p + ylab(label = expression(-'log'[10]*'(p)'))
p <- p + xlab(label = "Polygenic risk score")
p
View(Sample_analysis_2)
runApp('Viewing_PRS_set_analyses')
?reactive()
runApp('Viewing_PRS_set_analyses')
runApp('Viewing_PRS_set_analyses')
runApp('Viewing_PRS_set_analyses')
runApp('Viewing_PRS_set_analyses')
runApp('Viewing_PRS_set_analyses')
runApp('Viewing_PRS_set_analyses')
runApp('Viewing_PRS_set_analyses')
