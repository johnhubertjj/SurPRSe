# vim: set ft=python:
# this file is /data/$USER/test_data/chipseq/Snakefile
import sys
import pandas

configfile: "config.yaml"
shell.executable("/bin/bash")

if not config["chr"]["chrlist"]:
    CHRLIST = []
else:
    CHRLIST = config["chr"]["chrlist"]
CHR = list (range(config["chr"]["from"],config["chr"]["to"]+1)) + CHRLIST
INPATH = config["directory"]

shell.prefix("set -eo pipefail; ")

configfile: "PRS_config.yaml"
localrules: all, index_bam, flagstat_bam

controls = config["controls"]
if controls is None:
    sys.exit("Controls are needed")

samples_narrow = config["samples_narrow"]
if samples_narrow is None:
    samples_narrow = []

samples_broad = config["samples_broad"]
if samples_broad is None:
    samples_broad = []

rule Summary_stats_to_chromosome_converter:
	input: ""


'''Snakefile for MIS preparation
   Version 0.4'''

configfile: "scoring_config_yaml.yaml"
shell.executable("/bin/bash")

import re
import glob
import pandas
import numpy

#SAMPLE =  [re.search(r"(^.*\/)(.*)(?=\.bed)",x)[2] for x in  glob.iglob(INPATH + "*.bed")]

Gene_output_directory = config["Gene_output_directory"]
Validation_name = config["validation_set_name"]
training_name = config["training_set_name"]
Pathway_names = config["Pathway_names"]

Random_scoring_directory = config["Random_scoring_directory"]
permutations = config["permutations"]

BPLINK = ["bed", "bim", "fam"]
INPATH = {Gene_output_directory} + {Validation_name} + {training_name} + "_normal_gene_regions_Clumped_whole_genome_final" 
significance_thresholds=pandas.read_table({training_name} + "_" + {Validation_name} + "_plink_significance_thresholds_arguments_file_tmp.txt", sep = " ", header=None)
significance_thresholds=significance_thresholds[table_current.columns[2]].values

pathways=pandas.read_table(Pathway_names, sep = " ", header=None)
pathways=pathways[pathways.columns[0]].values

localrules: all, var_qc, subj_qc, split_plink, make_vcf, sort_vcf, flippyr_plink

rule all:
    input:
        expand("{Gene_output_directory}{Validation_name}_{training_name}_normal_gene_regions_Clumped_whole_genome_final.{ext}", Gene_output_directory=Gene_output_directory, Validation_name=Validation_name, training_name=training_name, ext=BPLINK)
 
rule run_profile_creation: 
    input: 
	score = expand("{Random_scoring_directory}{pathway}_random_{permutations}_with_{significance_thresholds}.score", Random_scoring_directory=Random_scoring_directory, pathway=pathways, permutations=permutations, significance_thresholds=significance_thresholds)
    output:
	out = expand("{Random_scoring_directory}{pathway}_random_{permutations}_with_{significance_thresholds}.profile"Random_scoring_directory=Random_scoring_directory, pathway=pathways, permutations=permutations, significance_thresholds=significance_thresholds)
     params:
	ins = INPATH 
    shell: "module load plink/1.90; "
	"plink --bfile {params.ins} --score {input.score} --out {output.out}"

#Pre-split QC

rule var_qc:
    input:
        expand(INPATH + "{{sample}}.{ext}", ext=BPLINK)
    output:
        plink = expand("data/plink/{{sample}}.{ext}", ext=BPLINK)
    params:
        ins = INPATH + "{sample}",
        out = "data/plink/{sample}",
        geno = config["qc"]["geno"],
        hwe = config["qc"]["hwe"],
        maf = config["qc"]["maf"]
    threads: 8
    shell: "module load plink/1.90; "
        "plink -bfile {params.ins} --geno {params.geno} --memory 128 "
        "--hwe {params.hwe} --maf {params.maf} --make-bed --out {params.out}"

rule subj_qc:
    input:
        plink = rules.var_qc.output.plink
    params:
        ins = rules.var_qc.params.out,
        out = "data/plink/{sample}_indivqc",
        mind = config["qc"]["mind"]
    output:
        plink = expand("data/plink/{{sample}}_indivqc.{ext}", ext=BPLINK),
        irem = "data/plink/{sample}.irem"
    threads: 8
    shell: "module load plink/1.90; "
        "plink -bfile {params.ins} --memory 128 "
        "--make-bed --mind {params.mind} --out {params.out}; "
        "if [ ! -f {output.irem} ]; then echo '' > {output.irem}; fi"

rule flippyr:
    input:
        fasta = config["ref"]["fasta"],
        plink = rules.subj_qc.output.plink
    params:
        out = "data/plink/{sample}",
        suff = "_refmatched"
    output:
        expand("data/plink/{{sample}}.{ext}", ext=["allele","flip","delete","log","log.tab"]),
        command = "data/plink/{sample}.runPlink"
    run:
        import flippyr
        flippyr.writeFiles(input["fasta"],input["plink"][1],params["out"],
                           silent=False,plink=True,p_suff=params["suff"])

rule flippyr_plink:
    input: rules.flippyr.output.command
    output: expand("data/plink/{{sample}}_refmatched.{ext}", ext=BPLINK)
    threads: 8
    shell: "module load plink/1.90; bash {input}"

rule split_plink: #Split plink files into chromosomes.
    input:
        rules.flippyr_plink.output
    params:
        ins = "data/plink/{sample}_refmatched",
        out = "data/plink/{sample}_chr{chr}",
        c="{chr}"
    output:
        expand("data/plink/{{sample}}_chr{{chr}}.{ext}", ext=BPLINK)
    shell: "module load plink/1.90; "
        "plink -bfile {params.ins} --chr {params.c} "
        "--make-bed --out {params.out} --memory 64 --keep-allele-order"

rule make_vcf:
    input:
        rules.split_plink.output
    output:
        "data/vcf/{sample}_chr{chr}_unsorted.vcf"
    params:
        ins="data/plink/{sample}_chr{chr}",
        out="data/vcf/{sample}_chr{chr}_unsorted"
    threads: 8
    shell: "module load plink/1.90; "
        "plink -bfile {params.ins} --memory 64 --real-ref-alleles "
        "--recode vcf --out {params.out}"

rule sort_vcf:
    input:
        "data/vcf/{sample}_chr{chr}_unsorted.vcf"
    output:
        "final/{sample}_chr{chr}.vcf.gz"
    threads: 8
    shell: "module load zlib tabix/0.2.6 vcftools/0.1.14-10; "
        "vcf-sort {input} | bgzip -c > {output}"

rule check_vcf:
    input:
        fasta=config["ref"]["fasta"],
        vcf="final/{sample}_chr{chr}.vcf.gz"
    output:
        "log/{sample}_chr{chr}.check.log"
    log: "log/{sample}_chr{chr}"
    shell:
        "source activate ./scripts/checkEnv; "
        "python scripts/checkVCF.py -r {input.fasta} -o {log} {input.vcf}"
